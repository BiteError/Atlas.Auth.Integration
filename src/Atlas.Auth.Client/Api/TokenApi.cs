/* 
 * Atlas.Auth API
 *
 * Authentication/authorization service
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Atlas.Auth.Client.Client;
using Atlas.Auth.Client.Model;

namespace Atlas.Auth.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokenApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>MessageModel</returns>
        MessageModel ApiV1TokenByTokenDelete (string token);

        /// <summary>
        /// Delete token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of MessageModel</returns>
        ApiResponse<MessageModel> ApiV1TokenByTokenDeleteWithHttpInfo (string token);
        /// <summary>
        /// Prolongate token ttl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ProlongateTokenModel</returns>
        ProlongateTokenModel ApiV1TokenByTokenGet (string token);

        /// <summary>
        /// Prolongate token ttl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of ProlongateTokenModel</returns>
        ApiResponse<ProlongateTokenModel> ApiV1TokenByTokenGetWithHttpInfo (string token);
        /// <summary>
        /// Prolongate token ttl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ProlongateTokenModel</returns>
        ProlongateTokenModel ApiV1TokenByTokenProlongatePost (string token);

        /// <summary>
        /// Prolongate token ttl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of ProlongateTokenModel</returns>
        ApiResponse<ProlongateTokenModel> ApiV1TokenByTokenProlongatePostWithHttpInfo (string token);
        /// <summary>
        /// Create new token for existed Auth cookies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TokenModel</returns>
        TokenModel ApiV1TokenPost ();

        /// <summary>
        /// Create new token for existed Auth cookies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TokenModel</returns>
        ApiResponse<TokenModel> ApiV1TokenPostWithHttpInfo ();
        /// <summary>
        /// Create new token for existed Auth cookies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <returns>TokenModel</returns>
        TokenModel ApiV1TokenSessionIdPost (string sessionId = null);

        /// <summary>
        /// Create new token for existed Auth cookies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <returns>ApiResponse of TokenModel</returns>
        ApiResponse<TokenModel> ApiV1TokenSessionIdPostWithHttpInfo (string sessionId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of MessageModel</returns>
        System.Threading.Tasks.Task<MessageModel> ApiV1TokenByTokenDeleteAsync (string token);

        /// <summary>
        /// Delete token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (MessageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageModel>> ApiV1TokenByTokenDeleteAsyncWithHttpInfo (string token);
        /// <summary>
        /// Prolongate token ttl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ProlongateTokenModel</returns>
        System.Threading.Tasks.Task<ProlongateTokenModel> ApiV1TokenByTokenGetAsync (string token);

        /// <summary>
        /// Prolongate token ttl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (ProlongateTokenModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProlongateTokenModel>> ApiV1TokenByTokenGetAsyncWithHttpInfo (string token);
        /// <summary>
        /// Prolongate token ttl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ProlongateTokenModel</returns>
        System.Threading.Tasks.Task<ProlongateTokenModel> ApiV1TokenByTokenProlongatePostAsync (string token);

        /// <summary>
        /// Prolongate token ttl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (ProlongateTokenModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProlongateTokenModel>> ApiV1TokenByTokenProlongatePostAsyncWithHttpInfo (string token);
        /// <summary>
        /// Create new token for existed Auth cookies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TokenModel</returns>
        System.Threading.Tasks.Task<TokenModel> ApiV1TokenPostAsync ();

        /// <summary>
        /// Create new token for existed Auth cookies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TokenModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenModel>> ApiV1TokenPostAsyncWithHttpInfo ();
        /// <summary>
        /// Create new token for existed Auth cookies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <returns>Task of TokenModel</returns>
        System.Threading.Tasks.Task<TokenModel> ApiV1TokenSessionIdPostAsync (string sessionId = null);

        /// <summary>
        /// Create new token for existed Auth cookies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <returns>Task of ApiResponse (TokenModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenModel>> ApiV1TokenSessionIdPostAsyncWithHttpInfo (string sessionId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TokenApi : ITokenApi
    {
        private Atlas.Auth.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokenApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Atlas.Auth.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TokenApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Atlas.Auth.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Atlas.Auth.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete token 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>MessageModel</returns>
        public MessageModel ApiV1TokenByTokenDelete (string token)
        {
             ApiResponse<MessageModel> localVarResponse = ApiV1TokenByTokenDeleteWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete token 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of MessageModel</returns>
        public ApiResponse< MessageModel > ApiV1TokenByTokenDeleteWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling TokenApi->ApiV1TokenByTokenDelete");

            var localVarPath = "/api/v1/Token/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1TokenByTokenDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageModel)));
        }

        /// <summary>
        /// Delete token 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of MessageModel</returns>
        public async System.Threading.Tasks.Task<MessageModel> ApiV1TokenByTokenDeleteAsync (string token)
        {
             ApiResponse<MessageModel> localVarResponse = await ApiV1TokenByTokenDeleteAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete token 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (MessageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageModel>> ApiV1TokenByTokenDeleteAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling TokenApi->ApiV1TokenByTokenDelete");

            var localVarPath = "/api/v1/Token/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1TokenByTokenDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageModel)));
        }

        /// <summary>
        /// Prolongate token ttl 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ProlongateTokenModel</returns>
        public ProlongateTokenModel ApiV1TokenByTokenGet (string token)
        {
             ApiResponse<ProlongateTokenModel> localVarResponse = ApiV1TokenByTokenGetWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Prolongate token ttl 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of ProlongateTokenModel</returns>
        public ApiResponse< ProlongateTokenModel > ApiV1TokenByTokenGetWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling TokenApi->ApiV1TokenByTokenGet");

            var localVarPath = "/api/v1/Token/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1TokenByTokenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProlongateTokenModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProlongateTokenModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProlongateTokenModel)));
        }

        /// <summary>
        /// Prolongate token ttl 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ProlongateTokenModel</returns>
        public async System.Threading.Tasks.Task<ProlongateTokenModel> ApiV1TokenByTokenGetAsync (string token)
        {
             ApiResponse<ProlongateTokenModel> localVarResponse = await ApiV1TokenByTokenGetAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Prolongate token ttl 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (ProlongateTokenModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProlongateTokenModel>> ApiV1TokenByTokenGetAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling TokenApi->ApiV1TokenByTokenGet");

            var localVarPath = "/api/v1/Token/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1TokenByTokenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProlongateTokenModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProlongateTokenModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProlongateTokenModel)));
        }

        /// <summary>
        /// Prolongate token ttl 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ProlongateTokenModel</returns>
        public ProlongateTokenModel ApiV1TokenByTokenProlongatePost (string token)
        {
             ApiResponse<ProlongateTokenModel> localVarResponse = ApiV1TokenByTokenProlongatePostWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Prolongate token ttl 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>ApiResponse of ProlongateTokenModel</returns>
        public ApiResponse< ProlongateTokenModel > ApiV1TokenByTokenProlongatePostWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling TokenApi->ApiV1TokenByTokenProlongatePost");

            var localVarPath = "/api/v1/Token/{token}/Prolongate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1TokenByTokenProlongatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProlongateTokenModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProlongateTokenModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProlongateTokenModel)));
        }

        /// <summary>
        /// Prolongate token ttl 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ProlongateTokenModel</returns>
        public async System.Threading.Tasks.Task<ProlongateTokenModel> ApiV1TokenByTokenProlongatePostAsync (string token)
        {
             ApiResponse<ProlongateTokenModel> localVarResponse = await ApiV1TokenByTokenProlongatePostAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Prolongate token ttl 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (ProlongateTokenModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProlongateTokenModel>> ApiV1TokenByTokenProlongatePostAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling TokenApi->ApiV1TokenByTokenProlongatePost");

            var localVarPath = "/api/v1/Token/{token}/Prolongate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1TokenByTokenProlongatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProlongateTokenModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProlongateTokenModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProlongateTokenModel)));
        }

        /// <summary>
        /// Create new token for existed Auth cookies 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TokenModel</returns>
        public TokenModel ApiV1TokenPost ()
        {
             ApiResponse<TokenModel> localVarResponse = ApiV1TokenPostWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new token for existed Auth cookies 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TokenModel</returns>
        public ApiResponse< TokenModel > ApiV1TokenPostWithHttpInfo ()
        {

            var localVarPath = "/api/v1/Token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1TokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TokenModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenModel)));
        }

        /// <summary>
        /// Create new token for existed Auth cookies 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TokenModel</returns>
        public async System.Threading.Tasks.Task<TokenModel> ApiV1TokenPostAsync ()
        {
             ApiResponse<TokenModel> localVarResponse = await ApiV1TokenPostAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new token for existed Auth cookies 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TokenModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokenModel>> ApiV1TokenPostAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/Token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1TokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TokenModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenModel)));
        }

        /// <summary>
        /// Create new token for existed Auth cookies 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <returns>TokenModel</returns>
        public TokenModel ApiV1TokenSessionIdPost (string sessionId = null)
        {
             ApiResponse<TokenModel> localVarResponse = ApiV1TokenSessionIdPostWithHttpInfo(sessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new token for existed Auth cookies 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <returns>ApiResponse of TokenModel</returns>
        public ApiResponse< TokenModel > ApiV1TokenSessionIdPostWithHttpInfo (string sessionId = null)
        {

            var localVarPath = "/api/v1/Token/sessionId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarQueryParams.Add("sessionId", Configuration.ApiClient.ParameterToString(sessionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1TokenSessionIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TokenModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenModel)));
        }

        /// <summary>
        /// Create new token for existed Auth cookies 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <returns>Task of TokenModel</returns>
        public async System.Threading.Tasks.Task<TokenModel> ApiV1TokenSessionIdPostAsync (string sessionId = null)
        {
             ApiResponse<TokenModel> localVarResponse = await ApiV1TokenSessionIdPostAsyncWithHttpInfo(sessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new token for existed Auth cookies 
        /// </summary>
        /// <exception cref="Atlas.Auth.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId"> (optional)</param>
        /// <returns>Task of ApiResponse (TokenModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokenModel>> ApiV1TokenSessionIdPostAsyncWithHttpInfo (string sessionId = null)
        {

            var localVarPath = "/api/v1/Token/sessionId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarQueryParams.Add("sessionId", Configuration.ApiClient.ParameterToString(sessionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1TokenSessionIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TokenModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenModel)));
        }

    }
}
